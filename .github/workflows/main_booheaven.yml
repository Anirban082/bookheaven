# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - booheaven

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.6.1

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Create production environment file
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env.production
          echo "CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}" >> .env.production
          echo "CLERK_ENCRYPTION_KEY=${{ secrets.CLERK_ENCRYPTION_KEY }}" >> .env.production
          echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> .env.production
          echo "STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}" >> .env.production
          echo "UPLOADTHING_TOKEN=${{ secrets.UPLOADTHING_TOKEN }}" >> .env.production
          echo "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}" >> .env.production
          echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}" >> .env.production
          echo "NEXT_PUBLIC_APP_URL=https://booheaven.azurewebsites.net" >> .env.production
          echo "NODE_ENV=production" >> .env.production

      - name: Create startup command file for Azure
        run: |
          echo "npm start" > startup.txt

      - name: Install dependencies with pnpm
        run: pnpm install --no-frozen-lockfile --shamefully-hoist

      - name: Build Next.js app
        run: pnpm build

      - name: Prepare package.json for Azure
        run: |
          cp package.json package.json.original
          jq '.scripts.start = "node server.js" | .dependencies.cmdk = "^1.0.0" | del(.packageManager) | .resolutions.cmdk = "^1.0.0"' package.json > package.json.new
          mv package.json.new package.json

      - name: Create server.js for Azure
        run: |
          echo 'const { createServer } = require("http");
          const { parse } = require("url");
          const next = require("next");
          
          const dev = process.env.NODE_ENV !== "production";
          const hostname = "0.0.0.0";
          const port = process.env.PORT || 8080;
          
          const app = next({ dev, hostname, port });
          const handle = app.getRequestHandler();
          
          app.prepare().then(() => {
            createServer(async (req, res) => {
              try {
                const parsedUrl = parse(req.url, true);
                await handle(req, res, parsedUrl);
              } catch (err) {
                console.error("Error occurred handling", req.url, err);
                res.statusCode = 500;
                res.end("Internal Server Error");
              }
            })
              .once("error", (err) => {
                console.error(err);
                process.exit(1);
              })
              .listen(port, () => {
                console.log(`> Ready on http://${hostname}:${port}`);
              });
          });' > server.js

      - name: Zip artifact for deployment
        run: zip -r release.zip . -x "node_modules/*" ".*" "*.zip" "package.json.original"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_C3B7CD199C9A4924880BE0B5CFF2C423 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_E8722865564A452EA976B56739877108 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_F3001370065D4540B9D6221951892102 }}

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'booheaven'
          slot-name: 'Production'
          package: .
